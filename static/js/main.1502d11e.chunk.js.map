{"version":3,"sources":["UI/Button/button.module.css","toolbar.module.css","Person.module.css","UI/Modal/Modal.module.css","UI/Backdrop/Backdrop.module.css","UI/Menu/Menu.module.css","DataStructure/memba.js","DataStructure/treeNode.js","DataStructure/tree.js","UI/Button/Button.js","toolbar.js","hoc/Aux.js","person.js","DataStructure/output.js","UI/Backdrop/Backdrop.js","UI/Modal/Modal.js","UI/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Memba","first_name","last_name","key","father_name","mother_name","dob","pob","number","address","spouse_name","native_place","education","job","this","TreeNode","data","mother","father","spouse","children","Tree","require","nodes","names","getFullName","node","i","length","json_memba","memba","spouse_info","educ_info","Node","push","split","trim","console","log","mem","father_first_name","includes","index","indexOf","j","parent","Button","props","className","styles","onClick","Toolbar","useState","typeOfSearch","setTypeOfSearch","type","onChange","nameInputHandler","value","event","target","submitPressedHandler","clearPressedHandler","Aux","React","memo","showInfo","setShowInfo","extraInfo","Person","curr","getFatherClicked","getMotherClicked","getSpouseClicked","getChildrenClicked","getAncestorClicked","Output","persons","map","getRelative","getChildrenHandler","getAncestors","backdrop","show","Backdrop","clicked","modalClosed","Modal","style","transform","opacity","Menu","App","wordToSearch","setWordToSearch","output","setOutput","authorized","setAuthorized","username","setUsername","password","setPassword","login","copyArr","toLowerCase","searchName","searchAddress","child","relation","unshift","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1502d11e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__3xIb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"toolbar_Toolbar__mE-yu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__1MQta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__16SAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__zFzWk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__3369Q\"};","class Memba {\n    constructor(first_name, last_name, key, father_name, mother_name, dob, pob, number, address, spouse_name, native_place, education, job){\n        this.key = key\n        this.first_name = first_name\n        this.last_name = last_name\n        this.father_name = father_name\n        this.mother_name = mother_name\n        this.dob = dob\n        this.pob = pob\n        this.number = number\n        this.address = address\n        this.spouse_name = spouse_name\n        this.native_place = native_place\n        this.education = education\n        this.job = job\n    }\n}\n\nexport default Memba;","function TreeNode(data){\n    this.key = data.key;\n    this.data = data;\n    this.mother = null;\n    this.father = null;\n    this.spouse = null;\n    this.children = [];\n}\n\nexport default TreeNode;","import Memba from './memba';\nimport Node from './treeNode';\n\nfunction Tree() {\n    //attributes= [\"first_name\", \"father_name\", \"mother_name\", \"last_name\", \"dob\", \"pob\", \"number\", \"spouse_info\", \"address\", \"native_place\", \"educ_info\", \"job_info\", \"f\", \"note\", \"email\"]\n    const data = require('./test.json');\n    const nodes = [];\n    const names = [];\n\n    const getFullName = (node) => {\n        if(node != null){\n            return node.data.first_name + \" \" + node.data.last_name;\n        }\n    }\n\n    //create nodes\n    for (let i = 0; i < data.length; i += 1) {\n        const json_memba = data[i];\n        const memba = new Memba(json_memba.first_name, json_memba.last_name, i, json_memba.father_name, json_memba.mother_name, json_memba.dob, json_memba.pob, json_memba.number, json_memba.address, json_memba.spouse_info, json_memba.native_place, json_memba.educ_info, json_memba.job)\n        const node = new Node(memba);\n        nodes.push(node);\n        names.push(node.data.first_name.split(\" \")[0].trim())\n    }\n\n    console.log(names);\n    //add mother,father,children\n    for (let i = 0; i < nodes.length; i += 1) {\n        const mem = nodes[i];\n        const father_first_name = mem.data.father_name.split(\" \")[0];\n        // console.log(\"Looking for father: \"+ father_first_name);\n        if (names.includes(father_first_name)) {\n            // console.log(\"Father found\");\n            let index = names.indexOf(father_first_name);\n            nodes[index].children.push(mem);\n            nodes[index].children[nodes[index].children.length - 1].father = nodes[index];\n        }\n    }\n\n    // Add spouses\n    for (let i = 0; i < nodes.length; i += 1) {\n        const mem = nodes[i];\n        if (names.includes(mem.data.spouse_name.split(\" \")[0])) {\n            if (mem.spouse == null) {\n                let index = names.indexOf(mem.data.spouse_name.split(\" \")[0]);\n                nodes[index].spouse = mem;\n                nodes[index].spouse.spouse = nodes[index];\n            }\n        }\n    }\n\n    // Add mothers\n    for (let i = 0; i < nodes.length; i += 1) {\n        const mem = nodes[i];\n\n        for(let j=0; j<nodes.length; j+=1){\n            const parent = nodes[j];\n            if(parent.spouse !== null && mem.father !== null){\n                if(getFullName(parent.spouse) === getFullName(mem.father)){\n                    mem.mother = parent;\n                    parent.children.push(mem);\n                    break;\n                }\n            }\n        }\n\n        // if (names.includes(mem.data.mother_name.split(\" \")[0])) {\n        //     let index = names.indexOf(mem.data.mother_name.split(\" \")[0]);\n        //     nodes[index].children.push(mem);\n        //     nodes[index].children[nodes[index].children.length - 1].mother = nodes[index];\n        // }\n    }\n\n\n\n    return nodes;\n}\n\nexport default Tree;","import React from 'react';\nimport styles from './button.module.css';\n\nconst Button = (props) =>{\n    return <button\n    className={styles.Button}\n    onClick={props.onClick}>\n        {props.children}\n    </button>\n} \n\nexport default Button;","import React,{useState} from 'react';\nimport Button from './UI/Button/Button';\n\nconst Toolbar = (props) => {\n    const [typeOfSearch, setTypeOfSearch] = useState (\"Search by name\");\n\n    const handleSelection = (event) => {\n        setTypeOfSearch(event.target.value);\n    }\n\n    return <div>\n        <hr />\n        <input type=\"text\" onChange={props.nameInputHandler} />\n        <select value = {typeOfSearch} onChange= {handleSelection}>\n            <option>Search by name</option>\n            <option>Search by address</option>\n        </select>\n        <br />\n        <br />\n        <Button onClick={() => props.submitPressedHandler (typeOfSearch)}>Submit</Button>\n        <Button onClick={props.clearPressedHandler}>Clear</Button>\n    </div>\n}\n\nexport default Toolbar;","const Aux = props => props.children;\n\nexport default Aux;","import React, { useState } from 'react';\nimport styles from './Person.module.css';\nimport Aux from './hoc/Aux';\nimport Button from './UI/Button/Button';\n\nconst Person = (props) => {\n    const [showInfo, setShowInfo] = useState([false, \"Show More\"]);\n    if (props.memba == null) { return null; }\n    const mem = props.memba.data;\n\n    const showMoreHandler = () => {\n        const curr = showInfo[0];\n        const str = (curr) ? \"Show More\" : \"Show Less\";\n        setShowInfo([!curr, str]);\n    }\n\n    //<p>ID: <strong>{mem.key}</strong></p>\n\n    let extraInfo = showInfo[0] ? < Aux >\n        <p> Father : < strong > {mem.father_name} </strong> </p>\n        <p> Mother: < strong > {mem.mother_name} </strong></p>\n        <p> Place of Birth: < strong > {mem.pob} </strong></p>\n        <p> Number: < strong > {mem.number} </strong></p>\n        <p> Address: < strong > {mem.address} </strong></p>\n        <p> Spouse Name: < strong > {mem.spouse_name} </strong> </p>\n        <p> Native Place: < strong > {mem.native_place} </strong></p>\n        <p> Education: < strong > {mem.education} </strong></p>\n    </Aux> : null;\n    return (<div className={styles.Person} >\n        <p> Name: < strong > {mem.first_name + \" \" + mem.last_name} </strong></p>\n        <p> DOB: < strong > {mem.dob} </strong></p> {extraInfo}\n\n        <Button onClick={showMoreHandler}>\n            <b > {showInfo[1]} </b></Button>\n        <br />\n        <Button onClick={\n            () => props.getFatherClicked(props.memba, \"father\")} > Show father </Button>\n        <Button onClick={\n            () => props.getMotherClicked(props.memba, \"mother\")} > Show mother </Button>\n        <Button onClick={\n            () => props.getSpouseClicked(props.memba, \"spouse\")} > Show spouse </Button>\n        <Button onClick={\n            () => props.getChildrenClicked(props.memba)} > Show Children </Button>\n        <Button onClick={\n            () => props.getAncestorClicked(props.memba)} > Show Lineage </Button>\n    </div>\n    );\n}\n\nexport default React.memo(Person);","import React from 'react';\nimport Person from '../person';\n\nconst Output = (props) => props.persons.map((memba) => {\n    return (\n        <Person\n            key={memba.key}\n            getFatherClicked={props.getRelative}\n            getMotherClicked={props.getRelative}\n            getChildrenClicked={props.getChildrenHandler}\n            getSpouseClicked={props.getRelative}\n            getAncestorClicked={props.getAncestors}\n            memba={memba}\n        />\n    );\n});\n\nexport default Output;","import React from 'react';\nimport styles from './Backdrop.module.css';\n\n\nconst backdrop = (props) =>{\n    console.log(\"[Backdrop.js] showBackdrop: \", props.show);\n    if(props.show){\n        return (\n            <div className={styles.Backdrop}\n                onClick={props.clicked}/>\n        );\n    } else return null;\n}\n\nexport default backdrop;","import React from 'react';\nimport styles from './Modal.module.css';\nimport Aux from '../../hoc/Aux';\nimport Backdrop from '../Backdrop/Backdrop'\n\nconst Modal = (props) => {\n    console.log(\"[Modal.js] showModal=\", props.show);\n    return (\n        <Aux>\n            <Backdrop show={props.show}\n                clicked={props.modalClosed}/>\n            <div\n                className={styles.Modal}\n                style={{\n                    transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                    opacity: props.show ? '1' : '0'\n                }}>\n                {props.children}\n            </div>\n        </Aux>\n    );\n}\n\nexport default React.memo(Modal);","import React from 'react';\nimport styles from './Menu.module.css';\n\nconst Menu = (props) => {\n    return <header className={styles.Menu}>\n        <div>\n            <h2><strong>Pant Balekundri Family Information</strong></h2 >\n        </div >\n    </header >\n}\n\nexport default Menu;","import React, { useState } from 'react';\nimport './App.css';\nimport Tree from './DataStructure/tree';\nimport Toolbar from './toolbar';\nimport styles from './toolbar.module.css';\nimport Output from './DataStructure/output';\nimport Modal from './UI/Modal/Modal';\nimport Menu from './UI/Menu/Menu';\n\nconst nodes = new Tree();\nconst USER_NAME = \"admin\";\nconst PASS = \"pbinfo\";\n\nfunction App() {\n  const [wordToSearch, setWordToSearch] = useState(\"\");\n  const [output, setOutput] = useState([]);\n  const [authorized, setAuthorized] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const login = () => {\n    if (username === USER_NAME && password === PASS) {\n      setAuthorized(true);\n    }\n  }\n\n  const usernameInputHandler = (event) => {\n    setUsername(event.target.value);\n  }\n\n  const passwordInputHandler = (event) => {\n    setPassword(event.target.value);\n  }\n\n  const searchName = () => {\n    const copyArr = [];\n\n    for (let i = 0; i < nodes.length; i += 1) {\n      const mem = nodes[i].data;\n      const full_name = (mem.first_name + \" \" + mem.last_name).toLowerCase();\n      if (full_name.includes(wordToSearch.toLowerCase())) {\n        copyArr.push(nodes[i]);\n      }\n    }\n    return copyArr;\n  }\n\n  const searchAddress = () => {\n    const copyArr = [];\n    for (let i = 0; i < nodes.length; i += 1) {\n      const mem = nodes[i].data;\n      const address = mem.address.toLowerCase();\n      if (address.includes(wordToSearch.toLowerCase())) {\n        copyArr.push(nodes[i]);\n      }\n    }\n    return copyArr;\n  }\n\n\n  const submitPressedHandler = (typeOfSearch) => {\n    setOutput([]);\n    if(wordToSearch === \"\"){ return;}\n    let copyArr = [];\n    if (typeOfSearch === \"Search by name\") {\n      copyArr = searchName();\n    }\n    else if (typeOfSearch === \"Search by address\") {\n      copyArr = searchAddress();\n    }\n    setOutput(copyArr);\n  }\n\n  const getRelative = (node, relation) => {\n    if (output.indexOf(node[relation]) === -1) {\n      if (node[relation] != null) {\n        let copyArr = [...output, node[relation]];\n        setOutput(copyArr);\n      }\n    }\n  }\n\n  const getChildrenHandler = (node) => {\n    let copyArr = [...output];\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (output.indexOf(child) === -1) {\n        copyArr.push(child);\n      }\n    }\n    setOutput(copyArr);\n  }\n\n  const getAncestors = (node) => {\n    setOutput([]);\n    let copyArr = [node];\n    let curr = node;\n    while (curr.father !== null) {\n      curr = curr.father;\n      copyArr.unshift(curr);\n    }\n    setOutput(copyArr);\n  }\n\n\n  const nameInputHandler = (event) => {\n    setWordToSearch(event.target.value);\n  }\n\n  const clearPressedHandler = () => {\n    setOutput(null);\n    setOutput([]);\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu/>\n      <br/>\n      <br/>\n      <br/>\n      <Toolbar\n        className= {styles.Toolbar}\n        nameInputHandler={nameInputHandler}\n        submitPressedHandler={submitPressedHandler}\n        clearPressedHandler={clearPressedHandler}\n      />\n      <Modal\n        show={!authorized}\n        modalClosed={login}>\n        <label>Username:  </label>\n        <input type=\"text\" onChange={usernameInputHandler} />\n        <br />\n        <label>Password:  </label>\n        <input type=\"password\" onChange={passwordInputHandler} />\n        <br />\n        <br />\n        <button onClick={login}>Login</button>\n      </Modal>\n      <Output persons={output}\n        getChildrenHandler={getChildrenHandler}\n        getRelative={getRelative}\n        getAncestors={getAncestors} />\n\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}