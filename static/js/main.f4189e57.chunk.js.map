{"version":3,"sources":["Person.module.css","DataStructure/memba.js","DataStructure/treeNode.js","DataStructure/tree.js","toolbar.js","hoc/Aux.js","person.js","DataStructure/output.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Memba","first_name","last_name","key","father_name","mother_name","dob","pob","number","address","spouse_name","native_place","education","job","this","TreeNode","data","mother","father","spouse","children","Tree","require","nodes","names","i","length","json_memba","memba","spouse_info","educ_info","node","Node","push","mem","includes","index","indexOf","split","Toolbar","props","type","onChange","nameInputHandler","onClick","submitPressedHandler","clearPressedHandler","Aux","React","memo","useState","showInfo","setShowInfo","extraInfo","className","styles","Person","curr","getFatherClicked","getMotherClicked","getSpouseClicked","getChildrenClicked","Output","persons","map","getFatherHandler","getMotherHandler","getChildrenHandler","getSpouseHandler","App","nameToSearch","setNameToSearch","output","setOutput","event","target","value","copyArr","console","log","toLowerCase","searchName","child","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4189e57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__1MQta\"};","class Memba {\n    constructor(first_name, last_name, key, father_name, mother_name, dob, pob, number, address, spouse_name, native_place, education, job){\n        this.key = key\n        this.first_name = first_name\n        this.last_name = last_name\n        this.father_name = father_name\n        this.mother_name = mother_name\n        this.dob = dob\n        this.pob = pob\n        this.number = number\n        this.address = address\n        this.spouse_name = spouse_name\n        this.native_place = native_place\n        this.education = education\n        this.job = job\n    }\n}\n\nexport default Memba;","function TreeNode(data){\n    \n    this.data = data;\n    this.mother = null;\n    this.father = null;\n    this.spouse = null;\n    this.children = [];\n}\n\nexport default TreeNode;","import Memba from './memba';\nimport Node from './treeNode';\n\nfunction Tree() {\n    //attributes= [\"first_name\", \"father_name\", \"mother_name\", \"last_name\", \"dob\", \"pob\", \"number\", \"spouse_info\", \"address\", \"native_place\", \"educ_info\", \"job_info\", \"f\", \"note\", \"email\"]\n    const data = require('./test.json');\n    const nodes = [];\n    const names = [];\n\n    //create nodes\n    for (let i = 0; i < data.length; i += 1) {\n        const json_memba = data[i];\n        const memba = new Memba(json_memba.first_name, json_memba.last_name, i, json_memba.father_name, json_memba.mother_name, json_memba.dob, json_memba.pob, json_memba.number, json_memba.address, json_memba.spouse_info, json_memba.native_place, json_memba.educ_info, json_memba.job)\n        const node = new Node(memba);\n        nodes.push(node);\n        names.push(node.data.first_name)\n    }\n\n\n    //add mother,father,children\n    for (let i = 0; i < nodes.length; i += 1) {\n        const mem = nodes[i];\n        if (names.includes(mem.data.father_name)) {\n            let index = names.indexOf(mem.data.father_name);\n            nodes[index].children.push(mem);\n            nodes[index].children[nodes[index].children.length - 1].father = nodes[index];\n        }\n\n\n        if (names.includes(mem.data.mother_name)) {\n            let index = names.indexOf(mem.data.mother_name);\n            nodes[index].children.push(mem);\n            nodes[index].children[nodes[index].children.length - 1].mother = nodes[index];\n        }\n\n        if (names.includes(mem.data.spouse_name.split(\" \")[0])) {\n            if (mem.spouse == null) {\n                let index = names.indexOf(mem.data.spouse_name.split(\" \")[0]);\n                nodes[index].spouse = mem;\n                nodes[index].spouse.spouse = nodes[index];\n            }\n        }\n    }\n\n\n\n    return nodes;\n}\n\nexport default Tree;","import React from 'react';\nconst Toolbar = (props) =>{\n    return <div>\n        <hr/>\n        <input type= \"text\" onChange= {props.nameInputHandler}/>\n        <button onClick = {props.submitPressedHandler}>Submit</button>\n        <button onClick = {props.clearPressedHandler}>Clear</button>\n    </div>\n}\n\nexport default Toolbar;","const Aux = props => props.children;\n\nexport default Aux;","import React, { useState } from 'react';\nimport styles from './Person.module.css';\nimport Aux from './hoc/Aux';\n\nconst Person = (props) => {\n    const [showInfo, setShowInfo] = useState([false, \"Show More\"]);\n    if (props.memba == null) { return null; }\n    const mem = props.memba.data;\n\n    const showMoreHandler = () => {\n        const curr = showInfo[0];\n        const str = (curr) ? \"Show More\" : \"Show Less\";\n        setShowInfo([!curr, str]);\n    }\n\n    // console.log(mem)\n    let extraInfo = showInfo[0] ? <Aux>\n        <p>Mother: <strong>{mem.mother_name}</strong></p>\n        <p>Place of Birth: <strong>{mem.pob}</strong></p>\n        <p>Number: <strong>{mem.number}</strong></p>\n        <p>Address: <strong>{mem.address}</strong></p>\n        <p>Spouse Name: <strong>{mem.spouse_name}</strong></p>\n        <p>Native Place: <strong>{mem.native_place}</strong></p>\n        <p>Education: <strong>{mem.education}</strong></p>\n    </Aux> : null;\n    return (\n        <div className={styles.Person}>\n            <p>ID: <strong>{mem.key}</strong></p>\n            <p>Name: <strong>{mem.first_name + \" \" + mem.last_name}</strong></p>\n            <p>DOB: <strong>{mem.dob}</strong></p>\n            <p>Father: <strong>{mem.father_name}</strong></p>\n            {extraInfo}\n            <br></br>\n            <button onClick={showMoreHandler}><strong>{showInfo[1]}</strong></button>\n            <button onClick={() => props.getFatherClicked(props.memba)}>Get father</button>\n            <button onClick={() => props.getMotherClicked(props.memba)}>Get mother</button>\n            <button onClick={() => props.getSpouseClicked(props.memba)}>Get spouse</button>\n            <button onClick={() => props.getChildrenClicked(props.memba)}>Show Children</button>\n        </div>\n    );\n}\n\nexport default React.memo(Person);","import React from 'react';\nimport Person from '../person';\nconst Output = (props) => props.persons.map((memba) => {\n\n    return <Person \n        getFatherClicked = {props.getFatherHandler}\n        getMotherClicked = {props.getMotherHandler}\n        getChildrenClicked={props.getChildrenHandler}\n        getSpouseClicked = {props.getSpouseHandler}\n        memba= {memba} \n        key={memba.key}/>\n});\n\nexport default Output;","import React, { useState } from 'react';\nimport './App.css';\nimport Tree from './DataStructure/tree';\nimport Toolbar from './toolbar';\n// import styles from './toolbar.module.css';\nimport Output from './DataStructure/output';\n\nfunction App() {\n\n  const nodes = new Tree();\n  const [nameToSearch, setNameToSearch] = useState(\"\");\n  const [output, setOutput] = useState([]);\n\n  const searchName = () => {\n    const copyArr = [];\n    // let found = null;\n    console.log(\"Searching for: \" + nameToSearch.toLowerCase());\n\n    for (let i = 0; i < nodes.length; i += 1) {\n      const mem = nodes[i].data;\n      const full_name = (mem.first_name + \" \" + mem.last_name).toLowerCase();\n      // console.log(full_name);\n      if (full_name.includes(nameToSearch.toLowerCase())) {\n        console.log(mem.first_name);\n        copyArr.push(nodes[i]);\n        console.log(copyArr);\n        // console.log(output);\n      }\n    }\n    return copyArr;\n  }\n\n\n  const submitPressedHandler = () => {\n    setOutput(null);\n    setOutput([]);\n    let copyArr = searchName();\n    setOutput(copyArr);\n  }\n\n  const getFatherHandler = (node) => {\n    if (output.indexOf(node.father) == -1) {\n      if (node.father != null) {\n        let copyArr = [...output, node.father];\n        setOutput(copyArr);\n      }\n    }\n  }\n\n  const getMotherHandler = (node) => {\n    if (output.indexOf(node.mother) == -1) {\n      if (node.mother != null) {\n        let copyArr = [...output, node.mother];\n        setOutput(copyArr);\n      }\n    }\n  }\n\n  const getSpouseHandler = (node) => {\n    if (output.indexOf(node.spouse) == -1) {\n      if (node.spouse != null) {\n        let copyArr = [...output, node.spouse];\n        setOutput(copyArr);\n      }\n    }\n  }\n\n  const getChildrenHandler = (node) => {\n    let copyArr = [...output];\n\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (output.indexOf(child) == -1) {\n        copyArr.push(child);\n      }\n    }\n    setOutput(copyArr);\n  }\n\n\n  const nameInputHandler = (event) => {\n    setNameToSearch(event.target.value);\n  }\n\n  const clearPressedHandler = () => {\n    setOutput(null);\n    setOutput([]);\n  }\n\n  return (\n    <div className=\"App\">\n      <Toolbar\n        nameInputHandler={nameInputHandler}\n        submitPressedHandler={submitPressedHandler}\n        clearPressedHandler={clearPressedHandler}\n      />\n      <Output persons={output}\n        getFatherHandler={getFatherHandler}\n        getMotherHandler={getMotherHandler}\n        getChildrenHandler={getChildrenHandler}\n        getSpouseHandler={getSpouseHandler} />\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}